{"version":3,"sources":["node_modules/double-metaphone/index.js","script.js"],"names":["vowels","slavoGermanic","germanic","initialExceptions","initialGreekCh","greekCh","chForKh","gForF","initialGForKj","initialAngerException","gForKj","jForJException","alle","hForS","dutchSch","doubleMetaphone","value","primary","secondary","index","length","last","normalized","String","toUpperCase","isSlavoGermanic","test","isGermanic","characters","split","previous","next","nextnext","subvalue","slice","_doubleMetaphone","_interopRequireDefault","require","obj","__esModule","default","_typeof","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","e","t","r","Object","n","hasOwnProperty","defineProperty","i","a","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","_catch","delegateYield","_createForOfIteratorHelper","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","_e","normalCompletion","err","didErr","step","_e2","minLen","_arrayLikeToArray","toString","from","arr","len","arr2","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","undefined","currentSurah","currentAyah","fetchVerseByTopic","_fetchVerseByTopic","_callee","topicInput","response","searchData","results","topicPhonetics","selectedResults","_iterator","_step","_result","verseText","fetchedVersesContainer","_i","_selectedResults","result","verseId","responseVerse","verseData","arabicText","englishText","surahNumber","ayahNumber","surahName","bismillahRegex","_callee$","_context","document","getElementById","trim","toLowerCase","alert","fetch","concat","json","search","total_results","text","some","includes","t0","innerHTML","verse_id","data","surah","number","numberInSurah","englishName","replace","body","classList","add","revealSurah","_revealSurah","_callee2","responseSurah","surahData","surahContent","highlightedElement","surahContainer","contentHeight","containerHeight","elementOffsetTop","elementHeight","scrollTopValue","_callee2$","_context2","ayahs","ayah","ayahText","highlighted","ayahTextArabic","querySelector","style","display","scrollHeight","offsetHeight","offsetTop","Math","min","scrollTop","autoResize","element","height","revealSurahByIndex","_x","_x2","_revealSurahByIndex","_callee3","_callee3$","_context3","ayahNumberInSurah"],"mappings":"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","file":"script.83bc2151.js","sourceRoot":"..","sourcesContent":["// Match vowels (including `Y`).\nconst vowels = /[AEIOUY]/\n\n// Match few Slavo-Germanic values.\nconst slavoGermanic = /W|K|CZ|WITZ/\n\n// Match few Germanic values.\nconst germanic = /^(VAN |VON |SCH)/\n\n// Match initial values of which the first character should be skipped.\nconst initialExceptions = /^(GN|KN|PN|WR|PS)/\n\n// Match initial Greek-like values of which the `CH` sounds like `K`.\nconst initialGreekCh = /^CH(IA|EM|OR([^E])|YM|ARAC|ARIS)/\n\n// Match Greek-like values of which the `CH` sounds like `K`.\nconst greekCh = /ORCHES|ARCHIT|ORCHID/\n\n// Match values which when following `CH`, transform `CH` to sound like `K`.\nconst chForKh = /[ BFHLMNRVW]/\n\n// Match values which when preceding a vowel and `UGH`, sound like `F`.\nconst gForF = /[CGLRT]/\n\n// Match initial values which sound like either `K` or `J`.\nconst initialGForKj = /Y[\\s\\S]|E[BILPRSY]|I[BELN]/\n\n// Match initial values which sound like either `K` or `J`.\nconst initialAngerException = /^[DMR]ANGER/\n\n// Match values which when following `GY`, do not sound like `K` or `J`.\nconst gForKj = /[EGIR]/\n\n// Match values which when following `J`, do not sound `J`.\nconst jForJException = /[LTKSNMBZ]/\n\n// Match values which might sound like `L`.\nconst alle = /AS|OS/\n\n// Match Germanic values preceding `SH` which sound like `S`.\nconst hForS = /EIM|OEK|OLM|OLZ/\n\n// Match Dutch values following `SCH` which sound like either `X` and `SK`,\n// or `SK`.\nconst dutchSch = /E[DMNR]|UY|OO/\n\n/**\n * Get the phonetics according to the Double Metaphone algorithm from a value.\n *\n * @param {string} value\n *   Value to use.\n * @returns {[string, string]}\n *   Double metaphone codes for `value`.\n */\n// eslint-disable-next-line complexity\nexport function doubleMetaphone(value) {\n  let primary = ''\n  let secondary = ''\n  let index = 0\n  const length = value.length\n  const last = length - 1\n  const normalized = String(value).toUpperCase() + '     '\n  const isSlavoGermanic = slavoGermanic.test(normalized)\n  const isGermanic = germanic.test(normalized)\n  const characters = normalized.split('')\n\n  // Skip this at beginning of word.\n  if (initialExceptions.test(normalized)) {\n    index++\n  }\n\n  // Initial X is pronounced Z, which maps to S. Such as `Xavier`.\n  if (characters[0] === 'X') {\n    primary += 'S'\n    secondary += 'S'\n    index++\n  }\n\n  while (index < length) {\n    const previous = characters[index - 1]\n    const next = characters[index + 1]\n    const nextnext = characters[index + 2]\n    /** @type {string} */\n    let subvalue\n\n    switch (characters[index]) {\n      case 'A':\n      case 'E':\n      case 'I':\n      case 'O':\n      case 'U':\n      case 'Y':\n      case 'À':\n      case 'Ê':\n      case 'É':\n        if (index === 0) {\n          // All initial vowels now map to `A`.\n          primary += 'A'\n          secondary += 'A'\n        }\n\n        index++\n\n        break\n      case 'B':\n        primary += 'P'\n        secondary += 'P'\n\n        if (next === 'B') {\n          index++\n        }\n\n        index++\n\n        break\n      case 'Ç':\n        primary += 'S'\n        secondary += 'S'\n        index++\n\n        break\n      case 'C':\n        // Various Germanic:\n        if (\n          previous === 'A' &&\n          next === 'H' &&\n          nextnext !== 'I' &&\n          !vowels.test(characters[index - 2]) &&\n          (nextnext !== 'E' ||\n            ((subvalue = normalized.slice(index - 2, index + 4)) &&\n              (subvalue === 'BACHER' || subvalue === 'MACHER')))\n        ) {\n          primary += 'K'\n          secondary += 'K'\n          index += 2\n\n          break\n        }\n\n        // Special case for `Caesar`.\n        if (index === 0 && normalized.slice(index + 1, index + 6) === 'AESAR') {\n          primary += 'S'\n          secondary += 'S'\n          index += 2\n\n          break\n        }\n\n        // Italian `Chianti`.\n        if (normalized.slice(index + 1, index + 4) === 'HIA') {\n          primary += 'K'\n          secondary += 'K'\n          index += 2\n\n          break\n        }\n\n        if (next === 'H') {\n          // Find `Michael`.\n          if (index > 0 && nextnext === 'A' && characters[index + 3] === 'E') {\n            primary += 'K'\n            secondary += 'X'\n            index += 2\n\n            break\n          }\n\n          // Greek roots such as `chemistry`, `chorus`.\n          if (index === 0 && initialGreekCh.test(normalized)) {\n            primary += 'K'\n            secondary += 'K'\n            index += 2\n\n            break\n          }\n\n          // Germanic, Greek, or otherwise `CH` for `KH` sound.\n          if (\n            isGermanic ||\n            // Such as 'architect' but not 'arch', orchestra', 'orchid'.\n            greekCh.test(normalized.slice(index - 2, index + 4)) ||\n            nextnext === 'T' ||\n            nextnext === 'S' ||\n            ((index === 0 ||\n              previous === 'A' ||\n              previous === 'E' ||\n              previous === 'O' ||\n              previous === 'U') &&\n              // Such as `wachtler`, `weschsler`, but not `tichner`.\n              chForKh.test(nextnext))\n          ) {\n            primary += 'K'\n            secondary += 'K'\n          } else if (index === 0) {\n            primary += 'X'\n            secondary += 'X'\n            // Such as 'McHugh'.\n          } else if (normalized.slice(0, 2) === 'MC') {\n            // Bug? Why matching absolute? what about McHiccup?\n            primary += 'K'\n            secondary += 'K'\n          } else {\n            primary += 'X'\n            secondary += 'K'\n          }\n\n          index += 2\n\n          break\n        }\n\n        // Such as `Czerny`.\n        if (next === 'Z' && normalized.slice(index - 2, index) !== 'WI') {\n          primary += 'S'\n          secondary += 'X'\n          index += 2\n\n          break\n        }\n\n        // Such as `Focaccia`.\n        if (normalized.slice(index + 1, index + 4) === 'CIA') {\n          primary += 'X'\n          secondary += 'X'\n          index += 3\n\n          break\n        }\n\n        // Double `C`, but not `McClellan`.\n        if (next === 'C' && !(index === 1 && characters[0] === 'M')) {\n          // Such as `Bellocchio`, but not `Bacchus`.\n          if (\n            (nextnext === 'I' || nextnext === 'E' || nextnext === 'H') &&\n            normalized.slice(index + 2, index + 4) !== 'HU'\n          ) {\n            subvalue = normalized.slice(index - 1, index + 4)\n\n            // Such as `Accident`, `Accede`, `Succeed`.\n            if (\n              (index === 1 && previous === 'A') ||\n              subvalue === 'UCCEE' ||\n              subvalue === 'UCCES'\n            ) {\n              primary += 'KS'\n              secondary += 'KS'\n              // Such as `Bacci`, `Bertucci`, other Italian.\n            } else {\n              primary += 'X'\n              secondary += 'X'\n            }\n\n            index += 3\n\n            break\n          } else {\n            // Pierce's rule.\n            primary += 'K'\n            secondary += 'K'\n            index += 2\n\n            break\n          }\n        }\n\n        if (next === 'G' || next === 'K' || next === 'Q') {\n          primary += 'K'\n          secondary += 'K'\n          index += 2\n\n          break\n        }\n\n        // Italian.\n        if (\n          next === 'I' &&\n          // Bug: The original algorithm also calls for A (as in CIA), which is\n          // already taken care of above.\n          (nextnext === 'E' || nextnext === 'O')\n        ) {\n          primary += 'S'\n          secondary += 'X'\n          index += 2\n\n          break\n        }\n\n        if (next === 'I' || next === 'E' || next === 'Y') {\n          primary += 'S'\n          secondary += 'S'\n          index += 2\n\n          break\n        }\n\n        primary += 'K'\n        secondary += 'K'\n\n        // Skip two extra characters ahead in `Mac Caffrey`, `Mac Gregor`.\n        if (\n          next === ' ' &&\n          (nextnext === 'C' || nextnext === 'G' || nextnext === 'Q')\n        ) {\n          index += 3\n          break\n        }\n\n        // Bug: Already covered above.\n        // if (\n        //   next === 'K' ||\n        //   next === 'Q' ||\n        //   (next === 'C' && nextnext !== 'E' && nextnext !== 'I')\n        // ) {\n        //   index++;\n        // }\n\n        index++\n\n        break\n      case 'D':\n        if (next === 'G') {\n          // Such as `edge`.\n          if (nextnext === 'E' || nextnext === 'I' || nextnext === 'Y') {\n            primary += 'J'\n            secondary += 'J'\n            index += 3\n            // Such as `Edgar`.\n          } else {\n            primary += 'TK'\n            secondary += 'TK'\n            index += 2\n          }\n\n          break\n        }\n\n        if (next === 'T' || next === 'D') {\n          primary += 'T'\n          secondary += 'T'\n          index += 2\n\n          break\n        }\n\n        primary += 'T'\n        secondary += 'T'\n        index++\n\n        break\n      case 'F':\n        if (next === 'F') {\n          index++\n        }\n\n        index++\n        primary += 'F'\n        secondary += 'F'\n\n        break\n      case 'G':\n        if (next === 'H') {\n          if (index > 0 && !vowels.test(previous)) {\n            primary += 'K'\n            secondary += 'K'\n            index += 2\n\n            break\n          }\n\n          // Such as `Ghislane`, `Ghiradelli`.\n          if (index === 0) {\n            if (nextnext === 'I') {\n              primary += 'J'\n              secondary += 'J'\n            } else {\n              primary += 'K'\n              secondary += 'K'\n            }\n\n            index += 2\n\n            break\n          }\n\n          // Parker's rule (with some further refinements).\n          if (\n            // Such as `Hugh`.  The comma is not a bug.\n            ((subvalue = characters[index - 2]),\n            subvalue === 'B' || subvalue === 'H' || subvalue === 'D') ||\n            // Such as `bough`.  The comma is not a bug.\n            ((subvalue = characters[index - 3]),\n            subvalue === 'B' || subvalue === 'H' || subvalue === 'D') ||\n            // Such as `Broughton`.  The comma is not a bug.\n            ((subvalue = characters[index - 4]),\n            subvalue === 'B' || subvalue === 'H')\n          ) {\n            index += 2\n\n            break\n          }\n\n          // Such as `laugh`, `McLaughlin`, `cough`, `gough`, `rough`, `tough`.\n          if (\n            index > 2 &&\n            previous === 'U' &&\n            gForF.test(characters[index - 3])\n          ) {\n            primary += 'F'\n            secondary += 'F'\n          } else if (index > 0 && previous !== 'I') {\n            primary += 'K'\n            secondary += 'K'\n          }\n\n          index += 2\n\n          break\n        }\n\n        if (next === 'N') {\n          if (index === 1 && vowels.test(characters[0]) && !isSlavoGermanic) {\n            primary += 'KN'\n            secondary += 'N'\n            // Not like `Cagney`.\n          } else if (\n            normalized.slice(index + 2, index + 4) !== 'EY' &&\n            normalized.slice(index + 1) !== 'Y' &&\n            !isSlavoGermanic\n          ) {\n            primary += 'N'\n            secondary += 'KN'\n          } else {\n            primary += 'KN'\n            secondary += 'KN'\n          }\n\n          index += 2\n\n          break\n        }\n\n        // Such as `Tagliaro`.\n        if (\n          normalized.slice(index + 1, index + 3) === 'LI' &&\n          !isSlavoGermanic\n        ) {\n          primary += 'KL'\n          secondary += 'L'\n          index += 2\n\n          break\n        }\n\n        // -ges-, -gep-, -gel- at beginning.\n        if (index === 0 && initialGForKj.test(normalized.slice(1, 3))) {\n          primary += 'K'\n          secondary += 'J'\n          index += 2\n\n          break\n        }\n\n        // -ger-, -gy-.\n        if (\n          (normalized.slice(index + 1, index + 3) === 'ER' &&\n            previous !== 'I' &&\n            previous !== 'E' &&\n            !initialAngerException.test(normalized.slice(0, 6))) ||\n          (next === 'Y' && !gForKj.test(previous))\n        ) {\n          primary += 'K'\n          secondary += 'J'\n          index += 2\n\n          break\n        }\n\n        // Italian such as `biaggi`.\n        if (\n          next === 'E' ||\n          next === 'I' ||\n          next === 'Y' ||\n          ((previous === 'A' || previous === 'O') &&\n            next === 'G' &&\n            nextnext === 'I')\n        ) {\n          // Obvious Germanic.\n          if (normalized.slice(index + 1, index + 3) === 'ET' || isGermanic) {\n            primary += 'K'\n            secondary += 'K'\n          } else {\n            primary += 'J'\n\n            // Always soft if French ending.\n            secondary +=\n              normalized.slice(index + 1, index + 5) === 'IER ' ? 'J' : 'K'\n          }\n\n          index += 2\n\n          break\n        }\n\n        if (next === 'G') {\n          index++\n        }\n\n        index++\n\n        primary += 'K'\n        secondary += 'K'\n\n        break\n      case 'H':\n        // Only keep if first & before vowel or btw. 2 vowels.\n        if (vowels.test(next) && (index === 0 || vowels.test(previous))) {\n          primary += 'H'\n          secondary += 'H'\n\n          index++\n        }\n\n        index++\n\n        break\n      case 'J':\n        // Obvious Spanish, `jose`, `San Jacinto`.\n        if (\n          normalized.slice(index, index + 4) === 'JOSE' ||\n          normalized.slice(0, 4) === 'SAN '\n        ) {\n          if (\n            normalized.slice(0, 4) === 'SAN ' ||\n            (index === 0 && characters[index + 4] === ' ')\n          ) {\n            primary += 'H'\n            secondary += 'H'\n          } else {\n            primary += 'J'\n            secondary += 'H'\n          }\n\n          index++\n\n          break\n        }\n\n        if (\n          index === 0\n          // Bug: unreachable (see previous statement).\n          // && normalized.slice(index, index + 4) !== 'JOSE'.\n        ) {\n          primary += 'J'\n\n          // Such as `Yankelovich` or `Jankelowicz`.\n          secondary += 'A'\n          // Spanish pron. of such as `bajador`.\n        } else if (\n          !isSlavoGermanic &&\n          (next === 'A' || next === 'O') &&\n          vowels.test(previous)\n        ) {\n          primary += 'J'\n          secondary += 'H'\n        } else if (index === last) {\n          primary += 'J'\n        } else if (\n          previous !== 'S' &&\n          previous !== 'K' &&\n          previous !== 'L' &&\n          !jForJException.test(next)\n        ) {\n          primary += 'J'\n          secondary += 'J'\n          // It could happen.\n        } else if (next === 'J') {\n          index++\n        }\n\n        index++\n\n        break\n      case 'K':\n        if (next === 'K') {\n          index++\n        }\n\n        primary += 'K'\n        secondary += 'K'\n        index++\n\n        break\n      case 'L':\n        if (next === 'L') {\n          // Spanish such as `cabrillo`, `gallegos`.\n          if (\n            (index === length - 3 &&\n              ((previous === 'A' && nextnext === 'E') ||\n                (previous === 'I' &&\n                  (nextnext === 'O' || nextnext === 'A')))) ||\n            (previous === 'A' &&\n              nextnext === 'E' &&\n              (characters[last] === 'A' ||\n                characters[last] === 'O' ||\n                alle.test(normalized.slice(last - 1, length))))\n          ) {\n            primary += 'L'\n            index += 2\n\n            break\n          }\n\n          index++\n        }\n\n        primary += 'L'\n        secondary += 'L'\n        index++\n\n        break\n      case 'M':\n        if (\n          next === 'M' ||\n          // Such as `dumb`, `thumb`.\n          (previous === 'U' &&\n            next === 'B' &&\n            (index + 1 === last ||\n              normalized.slice(index + 2, index + 4) === 'ER'))\n        ) {\n          index++\n        }\n\n        index++\n        primary += 'M'\n        secondary += 'M'\n\n        break\n      case 'N':\n        if (next === 'N') {\n          index++\n        }\n\n        index++\n        primary += 'N'\n        secondary += 'N'\n\n        break\n      case 'Ñ':\n        index++\n        primary += 'N'\n        secondary += 'N'\n\n        break\n      case 'P':\n        if (next === 'H') {\n          primary += 'F'\n          secondary += 'F'\n          index += 2\n\n          break\n        }\n\n        // Also account for `campbell` and `raspberry`.\n        subvalue = next\n\n        if (subvalue === 'P' || subvalue === 'B') {\n          index++\n        }\n\n        index++\n\n        primary += 'P'\n        secondary += 'P'\n\n        break\n      case 'Q':\n        if (next === 'Q') {\n          index++\n        }\n\n        index++\n        primary += 'K'\n        secondary += 'K'\n\n        break\n      case 'R':\n        // French such as `Rogier`, but exclude `Hochmeier`.\n        if (\n          index === last &&\n          !isSlavoGermanic &&\n          previous === 'E' &&\n          characters[index - 2] === 'I' &&\n          characters[index - 4] !== 'M' &&\n          characters[index - 3] !== 'E' &&\n          characters[index - 3] !== 'A'\n        ) {\n          secondary += 'R'\n        } else {\n          primary += 'R'\n          secondary += 'R'\n        }\n\n        if (next === 'R') {\n          index++\n        }\n\n        index++\n\n        break\n      case 'S':\n        // Special cases `island`, `isle`, `carlisle`, `carlysle`.\n        if (next === 'L' && (previous === 'I' || previous === 'Y')) {\n          index++\n\n          break\n        }\n\n        // Special case `sugar-`.\n        if (index === 0 && normalized.slice(1, 5) === 'UGAR') {\n          primary += 'X'\n          secondary += 'S'\n          index++\n\n          break\n        }\n\n        if (next === 'H') {\n          // Germanic.\n          if (hForS.test(normalized.slice(index + 1, index + 5))) {\n            primary += 'S'\n            secondary += 'S'\n          } else {\n            primary += 'X'\n            secondary += 'X'\n          }\n\n          index += 2\n          break\n        }\n\n        if (\n          next === 'I' &&\n          (nextnext === 'O' || nextnext === 'A')\n          // Bug: Already covered by previous branch\n          // || normalized.slice(index, index + 4) === 'SIAN'\n        ) {\n          if (isSlavoGermanic) {\n            primary += 'S'\n            secondary += 'S'\n          } else {\n            primary += 'S'\n            secondary += 'X'\n          }\n\n          index += 3\n\n          break\n        }\n\n        // German & Anglicization's, such as `Smith` match `Schmidt`, `snider`\n        // match `Schneider`. Also, -sz- in slavic language although in\n        // hungarian it is pronounced `s`.\n        if (\n          next === 'Z' ||\n          (index === 0 &&\n            (next === 'L' || next === 'M' || next === 'N' || next === 'W'))\n        ) {\n          primary += 'S'\n          secondary += 'X'\n\n          if (next === 'Z') {\n            index++\n          }\n\n          index++\n\n          break\n        }\n\n        if (next === 'C') {\n          // Schlesinger's rule.\n          if (nextnext === 'H') {\n            subvalue = normalized.slice(index + 3, index + 5)\n\n            // Dutch origin, such as `school`, `schooner`.\n            if (dutchSch.test(subvalue)) {\n              // Such as `schermerhorn`, `schenker`.\n              if (subvalue === 'ER' || subvalue === 'EN') {\n                primary += 'X'\n                secondary += 'SK'\n              } else {\n                primary += 'SK'\n                secondary += 'SK'\n              }\n\n              index += 3\n\n              break\n            }\n\n            if (\n              index === 0 &&\n              !vowels.test(characters[3]) &&\n              characters[3] !== 'W'\n            ) {\n              primary += 'X'\n              secondary += 'S'\n            } else {\n              primary += 'X'\n              secondary += 'X'\n            }\n\n            index += 3\n\n            break\n          }\n\n          if (nextnext === 'I' || nextnext === 'E' || nextnext === 'Y') {\n            primary += 'S'\n            secondary += 'S'\n            index += 3\n            break\n          }\n\n          primary += 'SK'\n          secondary += 'SK'\n          index += 3\n\n          break\n        }\n\n        subvalue = normalized.slice(index - 2, index)\n\n        // French such as `resnais`, `artois`.\n        if (index === last && (subvalue === 'AI' || subvalue === 'OI')) {\n          secondary += 'S'\n        } else {\n          primary += 'S'\n          secondary += 'S'\n        }\n\n        if (\n          next === 'S'\n          // Bug: already taken care of by `German & Anglicization's` above:\n          // || next === 'Z'\n        ) {\n          index++\n        }\n\n        index++\n\n        break\n      case 'T':\n        if (next === 'I' && nextnext === 'O' && characters[index + 3] === 'N') {\n          primary += 'X'\n          secondary += 'X'\n          index += 3\n\n          break\n        }\n\n        subvalue = normalized.slice(index + 1, index + 3)\n\n        if (\n          (next === 'I' && nextnext === 'A') ||\n          (next === 'C' && nextnext === 'H')\n        ) {\n          primary += 'X'\n          secondary += 'X'\n          index += 3\n\n          break\n        }\n\n        if (next === 'H' || (next === 'T' && nextnext === 'H')) {\n          // Special case `Thomas`, `Thames` or Germanic.\n          if (\n            isGermanic ||\n            ((nextnext === 'O' || nextnext === 'A') &&\n              characters[index + 3] === 'M')\n          ) {\n            primary += 'T'\n            secondary += 'T'\n          } else {\n            primary += '0'\n            secondary += 'T'\n          }\n\n          index += 2\n\n          break\n        }\n\n        if (next === 'T' || next === 'D') {\n          index++\n        }\n\n        index++\n        primary += 'T'\n        secondary += 'T'\n\n        break\n      case 'V':\n        if (next === 'V') {\n          index++\n        }\n\n        primary += 'F'\n        secondary += 'F'\n        index++\n\n        break\n      case 'W':\n        // Can also be in middle of word (as already taken care of for initial).\n        if (next === 'R') {\n          primary += 'R'\n          secondary += 'R'\n          index += 2\n\n          break\n        }\n\n        if (index === 0) {\n          // `Wasserman` should match `Vasserman`.\n          if (vowels.test(next)) {\n            primary += 'A'\n            secondary += 'F'\n          } else if (next === 'H') {\n            // Need `Uomo` to match `Womo`.\n            primary += 'A'\n            secondary += 'A'\n          }\n        }\n\n        // `Arnow` should match `Arnoff`.\n        if (\n          ((previous === 'E' || previous === 'O') &&\n            next === 'S' &&\n            nextnext === 'K' &&\n            (characters[index + 3] === 'I' || characters[index + 3] === 'Y')) ||\n          // Maybe a bug? Shouldn't this be general Germanic?\n          normalized.slice(0, 3) === 'SCH' ||\n          (index === last && vowels.test(previous))\n        ) {\n          secondary += 'F'\n          index++\n\n          break\n        }\n\n        // Polish such as `Filipowicz`.\n        if (\n          next === 'I' &&\n          (nextnext === 'C' || nextnext === 'T') &&\n          characters[index + 3] === 'Z'\n        ) {\n          primary += 'TS'\n          secondary += 'FX'\n          index += 4\n\n          break\n        }\n\n        index++\n\n        break\n      case 'X':\n        // French such as `breaux`.\n        if (\n          !(\n            index === last &&\n            // Bug: IAU and EAU also match by AU\n            // (/IAU|EAU/.test(normalized.slice(index - 3, index))) ||\n            previous === 'U' &&\n            (characters[index - 2] === 'A' || characters[index - 2] === 'O')\n          )\n        ) {\n          primary += 'KS'\n          secondary += 'KS'\n        }\n\n        if (next === 'C' || next === 'X') {\n          index++\n        }\n\n        index++\n\n        break\n      case 'Z':\n        // Chinese pinyin such as `Zhao`.\n        if (next === 'H') {\n          primary += 'J'\n          secondary += 'J'\n          index += 2\n\n          break\n        } else if (\n          (next === 'Z' &&\n            (nextnext === 'A' || nextnext === 'I' || nextnext === 'O')) ||\n          (isSlavoGermanic && index > 0 && previous !== 'T')\n        ) {\n          primary += 'S'\n          secondary += 'TS'\n        } else {\n          primary += 'S'\n          secondary += 'S'\n        }\n\n        if (next === 'Z') {\n          index++\n        }\n\n        index++\n\n        break\n      default:\n        index++\n    }\n  }\n\n  return [primary, secondary]\n}\n","import doubleMetaphone from 'double-metaphone';\n\nlet currentSurah = null;\nlet currentAyah = null;\n\nasync function fetchVerseByTopic() {\n    const topicInput = document.getElementById(\"topic\").value.trim().toLowerCase();\n\n    if (topicInput === \"\") {\n        alert(\"Please enter a topic.\");\n        return;\n    }\n\n    const response = await fetch(`https://api.quran.com/api/v4/search?q=${topicInput}&size=100&page=1`);\n    const searchData = await response.json();\n\n    if (searchData.search.total_results === 0) {\n        alert(\"No verses found for this topic.\");\n        return;\n    }\n\n    const results = searchData.search.results;\n    const topicPhonetics = doubleMetaphone(topicInput);\n    const selectedResults = [];\n\n    for (const result of results) {\n        const verseText = result.text || \"\"; // Assuming 'text' contains the verse text in a searchable language\n        const versePhonetics = doubleMetaphone(verseText.toLowerCase());\n\n        // Check if either phonetic encoding of the verse matches either encoding of the topic\n        if (versePhonetics.some(v => topicPhonetics.includes(v))) {\n            selectedResults.push(result);\n            if (selectedResults.length >= 20) break; // Limit to 20 results\n        }\n    }\n\n    if (selectedResults.length === 0) {\n        alert(\"No closely matching verses found for this topic.\");\n        return;\n    }\n\n    // Display the selected results\n    const fetchedVersesContainer = document.getElementById('fetched-verses');\n    fetchedVersesContainer.innerHTML = '';\n\n    for (const result of selectedResults) {\n        const verseId = result.verse_id;\n\n        const responseVerse = await fetch(`https://api.alquran.cloud/v1/ayah/${verseId}/editions/quran-simple,en.sahih`);\n        const verseData = await responseVerse.json();\n\n        let arabicText = verseData.data[0].text;\n        const englishText = verseData.data[1].text;\n        const surahNumber = verseData.data[1].surah.number;\n        const ayahNumber = verseData.data[1].numberInSurah;\n        const surahName = verseData.data[1].surah.englishName;\n\n        // Remove Bismillah for specific surahs as before\n        if (ayahNumber === 1 && surahNumber !== 1 && surahNumber !== 9) {\n            const bismillahRegex = /^بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\s*/;\n            arabicText = arabicText.replace(bismillahRegex, '');\n        }\n\n        // Append fetched verses to the container\n        fetchedVersesContainer.innerHTML += `<div><p>${arabicText}<br>${englishText}<br><em>(${surahName}, ${ayahNumber})</em></p><button onclick=\"revealSurahByIndex(${surahNumber}, ${ayahNumber})\">Reveal</button></div><br>`;\n    }\n\n    document.body.classList.add('content-moved-up');\n}\n\n\nasync function revealSurah() {\n    if (!currentSurah) {\n        alert(\"Please fetch a verse by topic first.\");\n        return;\n    }\n\n    const responseSurah = await fetch(`https://api.alquran.cloud/v1/surah/${currentSurah}/editions/quran-simple,en.sahih`);\n    const surahData = await responseSurah.json();\n\n    let surahContent = '';\n\n    surahData.data[1].ayahs.forEach((ayah, index) => {\n        const ayahNumber = ayah.numberInSurah;\n        const ayahText = ayah.text;\n        const highlighted = ayahNumber === currentAyah ? 'highlighted' : '';\n\n        let ayahTextArabic = surahData.data[0].ayahs[index].text;\n        if (index === 0 && currentSurah !== 1 && currentSurah !== 9) {\n            ayahTextArabic = ayahTextArabic.replace(/^بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\s*/, '');\n        }\n        surahContent += `<div class=\"verse-container\"><p class=\"${highlighted} english-text\">${ayahNumber}. ${ayahText}</p><p class=\"${highlighted} arabic-text\">${ayahTextArabic}</p></div>`;\n    });\n\n    if (currentSurah !== 1 && currentSurah !== 9) {\n        surahContent = `<div class=\"verse-container\"><p class=\"english-text\">0. In the name of Allah, the Entirely Merciful, the Especially Merciful.</p><p class=\"arabic-text\">بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ</p></div>${surahContent}`;\n    }\n\n    document.getElementById('surahContainer').innerHTML = surahContent;\n\n    document.querySelector('.surahs').style.display = 'flex';\n\n    const highlightedElement = document.querySelector('.highlighted');\n    const surahContainer = document.getElementById('surahContainer');\n\n    const contentHeight = surahContainer.scrollHeight;\n    const containerHeight = surahContainer.offsetHeight;\n    const elementOffsetTop = highlightedElement.offsetTop;\n    const elementHeight = highlightedElement.offsetHeight;\n\n    const scrollTopValue = Math.min(elementOffsetTop - (containerHeight - elementHeight) / 2, contentHeight - containerHeight);\n    surahContainer.scrollTop = scrollTopValue;\n}\nfunction autoResize(element) {\n    element.style.height = 'auto'; // Reset the height to auto\n    element.style.height = element.scrollHeight + 'px'; // Set the new height based on the scroll height\n}\n\nasync function revealSurahByIndex(surahNumber, ayahNumber) {\n    const responseSurah = await fetch(\n        `https://api.alquran.cloud/v1/surah/${surahNumber}/editions/quran-simple,en.sahih`\n    );\n    const surahData = await responseSurah.json();\n\n    let surahContent = '';\n\n    surahData.data[1].ayahs.forEach((ayah, index) => {\n        const ayahNumberInSurah = ayah.numberInSurah;\n        const ayahText = ayah.text;\n        const highlighted = ayahNumberInSurah === ayahNumber ? 'highlighted' : '';\n\n        let ayahTextArabic = surahData.data[0].ayahs[index].text;\n        if (index === 0 && surahNumber !== 1 && surahNumber !== 9) {\n            ayahTextArabic = ayahTextArabic.replace(/^بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\\s*/, '');\n        }\n        surahContent += `<div class=\"verse-container\"><p class=\"${highlighted} english-text\">${ayahNumberInSurah}. ${ayahText}</p><p class=\"${highlighted} arabic-text\">${ayahTextArabic}</p></div>`;\n    });\n\n    if (surahNumber !== 1 && surahNumber !== 9) {\n        surahContent = `<div class=\"verse-container\"><p class=\"english-text\">0. In the name of Allah, the Entirely Merciful, the Especially Merciful.</p><p class=\"arabic-text\">بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ</p></div>${surahContent}`;\n    }\n\n    document.getElementById('surahContainer').innerHTML = surahContent;\n\n    document.querySelector('.surahs').style.display = 'flex';\n\n    const highlightedElement = document.querySelector('.highlighted');\n    const surahContainer = document.getElementById('surahContainer');\n\n    const contentHeight = surahContainer.scrollHeight;\n    const containerHeight = surahContainer.offsetHeight;\n    const elementOffsetTop = highlightedElement.offsetTop;\n    const elementHeight = highlightedElement.offsetHeight;\n\n    const scrollTopValue = Math.min(elementOffsetTop - (containerHeight - elementHeight) / 2, contentHeight - containerHeight);\n    surahContainer.scrollTop = scrollTopValue;\n}"]}